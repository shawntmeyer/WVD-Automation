parameters:
  moduleName:
  moduleVersion:
  parameterFilePath: 
  dependsOn: []
  timeoutInMinutes: 90
  artifactFeedPath: '$(artifactFeedPath)'
  serviceConnection: '$(serviceConnection)'
  vmImage: $(vmImage)
  poolName: $(poolName)
  location: '$(location)'
  resourceGroupName: '$(resourceGroupName)'
  managementGroupId: '$(managementGroupId)'
  displayName: 'Deploy module'
  enabled: true

jobs:
- job: ${{ replace( parameters.displayName, ' ', '_') }}
  displayName: ${{ parameters.displayName }}
  ${{ if ne( parameters.dependsOn, '') }}:
    dependsOn: ${{ parameters.dependsOn }}
  timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
  pool:
    ${{ if ne(parameters.vmImage, '') }}:
      vmImage: ${{ parameters.vmImage }}
    ${{ if ne(parameters.poolName, '') }}:
      name: ${{ parameters.poolName }}
  steps:
  - powershell: |
      $lowerModuleName = "${{ parameters.moduleName }}".ToLower()
      Write-Host "##vso[task.setVariable variable=lowerModuleName]$lowerModuleName"
    displayName: 'Prepare download from artifacts feed'
    enabled: ${{ parameters.enabled }}

  - task: UniversalPackages@0
    displayName: 'Download module [${{ parameters.moduleName }}] version [${{ parameters.moduleVersion }}] from feed [${{ parameters.artifactFeedPath }}]'
    inputs:
      command: download
      vstsFeed: '${{ parameters.artifactFeedPath }}'
      vstsFeedPackage: '$(lowerModuleName)'
      vstsPackageVersion: '${{ parameters.moduleVersion }}'
      downloadDirectory: '$(downloadDirectory)'
    enabled: ${{ parameters.enabled }}

  - task: AzurePowerShell@4
    displayName: 'Deploy module [${{ parameters.moduleName }}] version [${{ parameters.moduleVersion }}] in [${{ parameters.resourcegroupname }}] via [${{ parameters.serviceConnection }}]'
    name: DeployResource
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      errorActionPreference: stop
      azurePowerShellVersion: LatestVersion
      ScriptType: InlineScript
      inline: |
        $templateFilePath = Join-Path "$(downloadDirectory)/${{ parameters.moduleName }}" 'deploy.json'
        Write-Verbose "Got path: $templateFilePath" -Verbose
        $DeploymentInputs = @{
          Name                  = "${{ parameters.moduleName }}-$(-join (Get-Date -Format yyyyMMddTHHMMssffffZ)[0..63])"
          TemplateFile          = $templateFilePath
          TemplateParameterFile = "$(Build.SourcesDirectory)/$(environmentPath)/Parameters/${{ parameters.parameterFilePath }}"
          Verbose               = $true
          ErrorAction           = "Stop"
        }
        
        $deploymentSchema = (ConvertFrom-Json (Get-Content -Raw -Path $templateFilePath)).'$schema'
        switch -regex ($deploymentSchema) {
          '\/deploymentTemplate.json#$' {
            Write-Verbose 'Handling resource group level deployment' -Verbose
            if (-not (Get-AzResourceGroup -Name '${{ parameters.resourceGroupName }}' -ErrorAction SilentlyContinue)) {
              Write-Verbose 'Deploying resource group [${{ parameters.resourceGroupName }}]' -Verbose
              New-AzResourceGroup -Name '${{ parameters.resourceGroupName }}' -Location '${{ parameters.location }}'
            }
            if ('${{ parameters.removeDeployment }}' -eq 'true') {
              Write-Output "Because the subsequent removal is enabled after the Module ${{ parameters.moduleName }} has been deployed, the following tags (moduleName: ${{ parameters.moduleName }}) are now set on the resource."
              Write-Output "This is necessary so that the later running Removal Stage can remove the corresponding Module from the Resource Group again."
              $DeploymentInputs += @{ 
                Tags = @{ RemoveModule = "${{ parameters.moduleName }}"; }
              }
            }
            New-AzResourceGroupDeployment @DeploymentInputs -ResourceGroupName '${{ parameters.resourceGroupName }}'
            break
          }
          '\/subscriptionDeploymentTemplate.json#$' {
            Write-Verbose 'Handling subscription level deployment' -Verbose
            $DeploymentInputs += @{
              Location = '${{ parameters.location }}'
            }
            New-AzSubscriptionDeployment @DeploymentInputs
            break
          }
          '\/managementGroupDeploymentTemplate.json#$' {
            Write-Verbose 'Handling management group level deployment' -Verbose
            $DeploymentInputs += @{
              ManagementGroupId = '${{ parameters.managementGroupId }}'
              Location          = '${{ parameters.location }}'
            } 
            New-AzManagementGroupDeployment @DeploymentInputs
            break
          }
          '\/tenantDeploymentTemplate.json#$' {
            Write-Verbose 'Handling tenant level deployment' -Verbose
            $DeploymentInputs += @{
              Location = '${{ parameters.location }}'
            }
            New-AzTenantDeployment @DeploymentInputs
            break
          }
          default {
            throw "[$deploymentSchema] is a non-supported ARM template schema"
          }
        }
    enabled: ${{ parameters.enabled }}